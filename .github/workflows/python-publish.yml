name: Python Package CI/CD

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
      
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.git,__pycache__,dist,build,*.egg-info,venv --max-line-length=100
          flake8 . --count --exit-zero --max-complexity=10 --exclude=.git,__pycache__,dist,build,*.egg-info,venv --max-line-length=100 --statistics
      
      - name: Format check with black
        run: |
          black --check .
      
      - name: Run tests
        run: |
          pytest
      
      - name: Build package
        run: |
          python setup.py sdist bdist_wheel
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.python-version }}
          path: dist/
          retention-days: 5

  publish-to-github-packages:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python for publishing
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Use a specific version for twine

      - name: Install publishing dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine

      - name: Download all dist artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_build_artifacts # Downloads all artifacts into this directory

      - name: Prepare consolidated dist directory
        run: |
          mkdir dist
          echo "Copying artifacts from all_build_artifacts/dist-3.10..."
          cp all_build_artifacts/dist-3.10/* dist/
          echo "Copying artifacts from all_build_artifacts/dist-3.11..."
          cp all_build_artifacts/dist-3.11/* dist/
          echo "Copying artifacts from all_build_artifacts/dist-3.12..."
          cp all_build_artifacts/dist-3.12/* dist/
          echo "Consolidated dist contents:"
          ls -l dist/

      - name: Publish to GitHub Packages
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          TWINE_REPOSITORY_URL: https://pypi.pkg.github.com/${{ github.repository_owner }}
        run: |
          python -m twine upload --skip-existing dist/*
